a loop creates multiple turns for the same game.
First, a secret word is chosen and presented on the screen.
Afterwards, in each turn, the user suggests a letter.
If the user's input is not valid,
the program prints an error and urges the user to suggest a different input.
Then, a string contains letters and underscores is presented on the screen.
As the loop runs, the user suggests more letters and sees the letters he/she already guessed.
The loop breaks when the user wins or loses.
The user wins when he/she finds all the letters of the secret word.
The user loses the game in the sixth mistake.

create_word_list():
    This function uses a file called "words".
    The file contains English basic vocabulary which is used in both American and British dialects.
    The function reads the file and copies its content to a list.
    The function formats the list

choose_word(new_list):
chooses a random word from the list.
    This word will be the secret word for the game.
    param new_list type: list
    :return: random_word
    :rtype: str


create_underscore(secret_word)
    """
    This function converts the secret word to a sequence of underscores.
    :param secret_word: a word which the user needs to guess
    :type secret_word: str
    :return: a sequence of underscores
    :rtype: str
    """

reveal_progress(secret_word, previous_guesses)

    """
    This function reveals the progress of the game.
    This function returns a string contains letters and underscores.
    The letters are the right guesses from previous_guesses, in their position in the secret word.
    A letter which the user has not guessed yet, is replaced with an underscore.
    :param previous_guesses: a list of the previous guesses of the user.
    :param secret_word: the word the user needs to guess
    type secret_word: string
    :return: user_interface
    :rtype: str
    """

format_guesses_user_order(previous_guesses):
    """This function sorts previous_guesses list by user's order.
    :param previous_guesses: previous guesses of the user
    :type previous_guesses: list
    :return: sequence of letters
    :rtype: str
    """

format_guesses_alphabetical_order(previous_guesses):
    """This function sorts previous_guesses list by alphabetical order.
    :param previous_guesses: previous guesses of the user
    :type previous_guesses: list
    :return: sequence of letters
    :rtype: str
    """

present_guesses(previous_guesses, lower_cased_guessed):
    """This function presents the list of previous guesses in two formats.
    The first format is guessing order.
    The second format is alphabetical order.
    :param lower_cased_guessed: a lower-cased string of user's input
    :type lower_cased_guessed: str
    :param previous_guesses: previous guesses of the user
    :type previous_guesses: str
    """

input_validation(lower_cased_guessed):
    """This function gets an input from the user and checks if it's a valid input for Hangman.
    A valid input is a letter of English alphabet which was not previously guessed by the user.
    Note that isalpha is not helpful because it defines non-English alphabet as valid.
    If the input is valid, the function prints the input and adds it to previous_guesses list.
    Else, the function prints the relevant error.
    :param lower_cased_guessed: a lower-cased string of user's input
    :type lower_cased_guessed: str
    :return: valid
    :rtype: bool
    """

counting_mistakes
    """
    This function checks if the letter suggested by the user is in the secret word,
    and prints the relevant feedback.
    If the guess was wrong, the function prints the relevant diagram,
    based on the number of the user's wrong guesses.
    When the the number of mistakes is 6, the function prints a losing message.
    :param secret_word: the word the user needs to guess
    :type secret_word: str
    :param lower_cased_guessed: a lower-cased string of user's input.
    :type lower_cased_guessed: str
    :return: list_length
    :rtype: int
    """

check winning
    """This functions checks if the user guessed all the letters of the secret word.
    :param secret_word: the word the user needs to guess
    :type secret_word: str
    :param previous_guesses: previous guesses of the user
    :type previous_guesses: list
    :return: you_won param
    :rtype: bool
    """


